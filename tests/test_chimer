#!/usr/bin/perl
# vi:set sw=2 ai sm:

require 'chimer';
Chimer->import(qw( $dow_re $dow_range_re %expressive_mark_to_midi_velocity ));

no integer;

###############################################################################

sub test_in_range () {
  for my $test ([1,	'1',		1],
		[1,	'2',		0],
		[1,	'1-2',		1],
		[1,	'2, 1',		1],
		[2,	'1-2',		1],
		[2,	'1-3',		1],
		[2.5,	'1-2',		0],
		[2.5,	'1-3',		1],
		[5,	'1, 3-8, 10',	1]) {
    my($n, $range_spec, $expected_result) = @$test;
    my $actual_result = Chimer::in_range($n, $range_spec);
    die "in_range($n, \"$range_spec\"): test failed: expected $expected_result but got $actual_result\n"
	unless $expected_result == $actual_result;
  }
}

sub test_in_semi_closed_range () {
  for my $test ([1,	'1',		1],
		[1,	'2',		0],
		[1,	'1-2',		1],
		[2,	'1-2',		0],
		[20.75,	'19.517-20.5',	0]) {
    my($n, $range_spec, $expected_result) = @$test;
    my $actual_result = Chimer::in_semi_closed_range($n, $range_spec);
    die "in_semi_closed_range($n, \"$range_spec\"): test failed: expected $expected_result but got $actual_result\n"
	unless $expected_result == $actual_result;
  }
}

sub test_parse_dow () {
  for my $test (['Sunday',		0],
		['Monday',		1],
		['Tuesday',		2],
		['Wednesday',		3],
		['Thursday',		4],
		['Friday',		5],
		['Saturday',		6],
		['Sun',			0],
		['Mon',			1],
		['Tue',			2],
		['Tues',		2],
		['Wed',			3],
		['Thu',			4],
		['Thur',		4],
		['Thurs',		4],
		['Fri',			5],
		['Sat',			6],
		['Sun',			0],
		['M',			1],
		['T',			2],
		['W',			3],
		['R',			4],
		['F',			5],
		['S',			6],
		['someday',		undef]) {
    my($s, $expected_result) = @$test;
    my $actual_result = Chimer::parse_dow($s);
    die "parse_dow(\"$s\"): test failed: expected $expected_result but got $actual_result\n" unless $expected_result == $actual_result;
    # dow_re
    ($expected_result, $actual_result) = (defined $expected_result, $s =~ /^$dow_re$/);
    die "\"$s\" =~ /\$dow_re/: test failed: expected $expected_result but got $actual_result\n" unless $expected_result == $actual_result;
    # dow_range_re
    ($expected_result, $actual_result) = ($expected_result, $s =~ /^$dow_range_re$/);
    die "\"$s\" =~ /\$dow_range_re/: test failed: expected $expected_result but got $actual_result\n" unless $expected_result == $actual_result;
  }
}

sub test_parse_dow_range () {
  for my $test (['Thursday',		'4'],
		['M-R',			'1-4'],
		['Tues-Wed',		'2-3'],
		['Mon,Tues-Wed',	'1,2-3'],
		['Fri-Sun',		'5-6,0'],
		['Fri-Tue',		'5-6,0-2'],
		['TRF',			'2,4,5'],
		['someday',		'ERROR']) {
    my($s, $expected_result) = @$test;
    my $actual_result = Chimer::parse_dow_range($s);
    die "parse_dow_range(\"$s\"): test failed: expected $expected_result but got $actual_result\n" unless $expected_result eq $actual_result;
    # dow_range_re
    ($expected_result, $actual_result) = (defined $expected_result && $expected_result ne 'ERROR', $s =~ /^$dow_range_re$/);
    die "\"$s\" =~ /\$dow_range_re/: test failed: expected $expected_result but got $actual_result\n" unless $expected_result == $actual_result;
  }
}

sub test_parse_named_deciday () {
  for my $test (['A',		6],
		['B',		7],
		['E',		10],
		['morning',	1],
		['midday',	3],
		['evening',	5]) {
    my($name, $expected_result) = @$test;
    my $actual_result = Chimer::parse_named_deciday($name);
    die "parse_named_deciday(\"$name\"): test failed: expected $expected_result but got $actual_result\n" unless $expected_result == $actual_result;
  }
}

sub test_parse_clocktime () {
  for my $test (['00:00',		0.0],
		['07:30',		7.5],
		['19:15',		19.25],
		['20:45',		20.75],
		['24:00',		24.0]) {
    my($name, $expected_result) = @$test;
    my $actual_result = Chimer::parse_clocktime($name);
    die "parse_clocktime(\"$name\"): test failed: expected $expected_result but got $actual_result\n" unless $expected_result == $actual_result;
  }
}

sub test_parse_clocktime_range () {
  for my $test (['00:00',	'0'],
		['12:00-12:30',	'12-12.5'],
		['12:00-00:00',	'12-24'],
		['19:30-20:30',	'19.5-20.5'],
		['23:00-7:00',	'23-24,0-7']) {
    my($s, $expected_result) = @$test;
    my $actual_result = Chimer::parse_clocktime_range($s);
    die "parse_clocktime_range(\"$s\"): test failed: expected $expected_result but got $actual_result\n" unless $expected_result eq $actual_result;
  }
}

sub test_named_deciday_range () {
  for my $test (['morning',		'1'],
		['morning-evening',	'1-5'],
		['evening-B',		'5-7'],
		['midday,A',		'3,6'],
		['C-morning',		'8-10,1']) {
    my($s, $expected_result) = @$test;
    my $actual_result = Chimer::parse_named_deciday_range($s);
    die "parse_named_deciday_range(\"$s\"): test failed: expected $expected_result but got $actual_result\n" unless $expected_result eq $actual_result;
  }
}

sub test_determine_volume_from_directive_and_time () {
  for my $test (['Thursday hour 19.75-22: 0.25',	21, 30,  0, 6.66, 0, undef, undef],
		['Thursday 19:45-22:00: 0.25',		20, 0,   0, 5.95, 4, 0.25,  undef],	# actual failure on 20210819
		['Thursday 19:45-22:00: 0.25',		21, 30,  0, 6.66, 0, undef, undef],
		["Tue,Fri-Sun 19:31-20:30: 0.5",	20, 45,	 0, 6.30, 5, undef, undef],	# actual failure on 20210820
		['morning: 0.5',			17, 53, 36, 5.14, 0, undef, undef],
		['E-evening: 0.75',			17, 53,  0, 5.14, 0, 0.75,  undef],
		['3:00-9:00: 0.6',			14, 0,   0, 3.76, 2, undef, undef],	# actual failure on 20210817
		['Tue,Fri-Sat,Sun 19:31-20:30: 0.5',	21, 0,   0, 6.37, 2, undef, undef],	# actual failure on 20210817
		['A: 0.5',				21, 30,  0, 6.66, 0, 0.5,   undef],
		['0.5',                           	12, 30,  0, 3.20, 0, 0.5,   undef]) {
    my($directive, $hour, $min, $sec, $deciday, $wday, $expected_result1, $expected_result2) = @$test;
    my($actual_result1, $actual_result2) = Chimer::determine_volume_from_directive_and_time($directive, $hour, $min, $sec, $deciday, $wday);
    die "determine_volume_from_directive_and_time(\"$directive\", $hour, $min, $sec, $deciday, $wday): test failed: expected ($expected_result1, $expected_result2) but got ($actual_result1, $actual_result2)\n" unless $expected_result1 == $actual_result1 && $expected_result2 eq $actual_result2;
  }
}

sub test_interpret_melody () {
  my $mf = $expressive_mark_to_midi_velocity{'mf'};
  my $f = $expressive_mark_to_midi_velocity{'f'};
  my $fff = $expressive_mark_to_midi_velocity{'fff'};
  for my $test ([q(\relative c' {c d e}),		1,	"c4 1 $mf d4 1 $mf e4 1 $mf"],
		[q(\relative c' {ces c cis}),		2,	"b3 2 $mf c4 2 $mf c#4 2 $mf"],
		[q(\relative c'' {e dis a gis}),	1,	"e5 1 $mf d#5 1 $mf a4 1 $mf g#4 1 $mf"],
		[q(\relative e { fis4 }),		1,	"f#3 1 $mf"],
		[q(\relative e { fis4. }),		1,	"f#3 1.5 $mf"],
		[q(\relative e { fis4.. }),		1,	"f#3 1.75 $mf"],
		[q(\relative e { fis4.. e e4 }),	1,	"f#3 1.75 $mf e3 1.75 $mf e3 1 $mf"],
		[q(\relative c' {c \fff d \f e}),	1,	"c4 1 $mf d4 1 $fff e4 1 $f"],
		[q(\relative e { r1 }),			1,	"r 4 $mf"],
		[q(\relative { c'' \longa \breve 1 2 4 8 16 32 64 128}), 1, "c5 16 $mf c5 8 $mf c5 4 $mf c5 2 $mf c5 1 $mf c5 0.5 $mf c5 0.25 $mf c5 0.125 $mf c5 0.0625 $mf c5 0.03125 $mf"],
		[q(\drums { r1 }),			1,	"r 4 $mf"]) {
    my($lilypond_code, $beat_length, $stringified_expected_result) = @$test;
    my $actual_result = Chimer::interpret_melody($lilypond_code, $beat_length);
    my $stringified_actual_result = ref $actual_result? join(' ', map { @$_ } @$actual_result): defined $actual_result? $actual_result: 'undef';
    die "interpret_melody(\"$lilypond_code\", $beat_length): test failed: expected ($stringified_expected_result) but got ($stringified_actual_result)\n" unless $stringified_expected_result eq $stringified_actual_result;
  }
}

###############################################################################

binmode STDIN, ':utf8';
binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';

select((select(STDERR), $| = 1)[0]); # I don't know why this is needed for STDERR

# SIGCHLD handler must be IGNORE, otherwise Time::HiRes::sleep will fail randomly
$SIG{CHLD} = 'IGNORE';

test_in_range;
test_parse_dow;
test_parse_dow_range;
test_parse_named_deciday;
test_parse_named_deciday_range;
test_parse_clocktime;
test_parse_clocktime_range;
test_determine_volume_from_directive_and_time;
test_interpret_melody;
print "Tests passed\n";
