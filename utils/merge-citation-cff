#!/usr/bin/perl
# vi:set sw=2 ai sm:
# short script to pull references from doc/CREDITS.md and stash them into CITATION.cff

# see https://stackoverflow.com/questions/6162484/why-does-modern-perl-avoid-utf-8-by-default for these crazy hacks
# THERE ARE MORE CRAZY HACKS THERE FOR MORE COMPLEX PROJECTS!!
use v5.12; # minimal for unicode string feature
use v5.14; # //u modifier
use utf8;
open qw( :encoding(UTF-8) :std );
use charnames qw( :full :short );
use feature "unicode_strings";

use warnings qw( FATAL utf8 );
use Encode qw( encode decode );
#@ARGV = map { decode("UTF-8", $_) } @ARGV if grep /\P{ASCII}/ => @ARGV;

use strict;
use integer;

use POSIX;
use POSIX ":sys_wait_h"; # for nonblocking read
use DateTime;
use Data::Dumper;

binmode STDIN, ':utf8';
binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';

select((select(STDERR), $| = 1)[0]); # I don't know why this is needed for STDERR

# End of boilerplate



sub STATE__INITIAL  () { 'INITIAL' }
sub STATE__CITATION () { 'CITATION' }
sub STATE__UNKNOWN  () { 'UNKNOWN' }

# hack in trying to make GitHub happy. error messages are garbage, docs are unclear, official tools don't work, we're left guessing what's wrong
sub quotable ($) {
  my($s) = @_;
  return ($s =~ /\s/s || $s =~ /^https?:\/\//)? "\"$s\"": $s;
}

my($template_input, $credits_input);
for my $arg (@ARGV) {
  if ($arg =~ /\.cff.in$/) {
    die "$0: $arg: CFF template already defined\n" if defined $template_input;
    $template_input = $arg;
  } elsif ($arg =~ /\b(?:ACKNOWLEDGE?MENTS|CREDITS)(?:\.md)?$/) {
    die "$0: $arg: Credits template already defined\n" if defined $credits_input;
    $credits_input = $arg;
  } else {
    die "$0: $arg: Unknown input\n";
  }
}

# Scan for citations in credits file
# This is just a quick-and-dirty hack -- it will have LOTS OF BUGS
my @citations;
open(INPUT, '<:utf8', $credits_input) or die "$0: $credits_input: $!\n";
for (my $state = STATE__INITIAL;;) {
  my $s = scalar <INPUT>;
last unless defined $s;
  if ($state eq STATE__INITIAL || $state eq STATE__UNKNOWN) {
    if ($s =~ /\(\d{4}\)\.\s/s) { # looks like a citation?
      push @citations, $s;
      $state = STATE__CITATION;
    }
  } elsif ($state eq STATE__CITATION) {
    if ($s =~ /^\s*-/s || $s =~ /^\s*$/s) {
      $state = STATE__UNKNOWN;
    } else {
      $citations[$#citations] .= $s;
    }
  } else {
    die "$0: INTERNAL ERROR: Reached unknown state $state";
  }
}
close INPUT;

# Analyze our citations
my $year_re = '\s*\((\d{4,}|n\.d\.)([a-z])?\)\.\s'; # NOTE: 2 captures
for (my $i = 0; $i < @citations; $i += 1) {
  my $s = $citations[$i];
  my $node;
  $s =~ s/\s+$//;
  $s =~ s/\s+/ /g;

  # Hack off the retrieval URL first since that's the easiest step
  if ($s =~ s/(?<=\.)\s(?:(doi:\S+)|(?:(?:Available at|Retrieved from)|(\w[\w\s]+\w) (?:available at|retrieved from)) (\S+))$//s) {
    my($doi, $thing, $url) = ($1, $2, $3);
    $node->{'url'} = defined $doi? $doi: $url;
  }

  # Does it look like we have an author? sigh.
  if ($s =~ s/^((?:(?!$year_re).)*\.(?:<\/span>)?(?:\]\([^\(\)]+\))?) (?=$year_re)//s) {
    my($possible_author_list, $author_type) = ($1);
    ($possible_author_list, $author_type) = ($1, $2) if $possible_author_list =~ /^(.*?), (ed\.)$/;
    my @people;
    for (my $i = 0; substr($s, $i) =~ /\S/s;) {
      my $s = substr($possible_author_list, $i);
      my($possible_name, $url, $last_name, $given_names, $initials, $single_name, $node);
      if ($s =~ /^\[(.*?)\]\((.*?)\)(?:,|$)/s) {
	($possible_name, $url) = ($1, $2);
      } elsif ($s =~ /^\[(.*?)\]\((.*?)\)\.(?:,|$)/s) { # certainly a handle/team name/company name?
	($possible_name, $url) = ($1, $2);
      } else {
	$possible_name = $s;
      }
      if ($possible_name =~ /^(.*?), <span title="([^""]+)">((?:\w\.\s*)+)<\/span>$/) {
	($last_name, $given_names, $initials) = ($1, $2, $3);
      } elsif ($possible_name =~ /^(.*?), <span title=([^""<>]+)>((?:\w\.\s*)+)<\/span>$/) {
	($last_name, $given_names, $initials) = ($1, $2, $3);
      } elsif ($possible_name =~ /^(.*?), ((?:.\.\s*)+)$/) {
	($last_name, $initials) = ($1, $2);
      } elsif ($possible_name =~ /^\S+$/) {
	$single_name = $possible_name;
      } else {
	die "Can't figure out \"$s\"\n";
      }

      $node->{'family-names'} = $last_name if defined $last_name;
      $node->{'given-names'} = $given_names if defined $given_names;
      $node->{'given-names'} = $initials if defined $initials && !defined $given_names;
      $node->{'name'} = $single_name if defined $single_name;
      $node->{+($url =~ /^10\./? 'doi': 'url')} = $url if defined $url;
      push @people, $node if $node;

      $i += length $s;
      $i += length $& if substr($s, $i) =~ /^,\s*/;
    }
    $node->{'authors'} = [@people] if @people;
  }

  # Does it look like we have a title?
  if ($s =~ s/$year_re\s*(.*?)(?: \[(.*)\])?\.$//s) {
    my($year, $serial, $title, $type) = ($1, $2, $3, $4);
    $node->{'year'} = $year;
    $node->{'year-serial'} = $serial if defined $serial;
    $node->{'title'} = $title;
    $node->{'type'} = ($type =~ / file$/ || $type =~ /^data\s*set$/i)? 'dataset': 'software';
  }

  $node->{'unknown'} = $s if $s =~ /\S/s;
  $citations[$i] = $node;
}

# Copy everything from the cff template
open(INPUT, '<:utf8', $template_input) or die "$0: $template_input: $!\n";
for (;;) {
  my $s = scalar <INPUT>;
last unless defined $s;
  print $s;
}
close INPUT;

# Add citations
print "references:\n" if @citations;
for my $citation (@citations) {
  my $indent = '- ';
  for my $key (sort keys %$citation) {
    if ($key eq 'authors') {
      printf "%s%s:\n", $indent, $key;
      for my $author (@{$citation->{'authors'}}) {
	my $indent = '  - ';
	for my $field ('family-names', 'given-names', 'name') {
	  printf "%s%s: %s\n", $indent, $field, quotable $author->{$field} if defined $author->{$field};
	  $indent = '    ';
	}
      }
    } elsif ($key ne 'unknown') {
      printf "%s%s: %s\n", $indent, $key, quotable $citation->{$key};
    }
    $indent = '  ';
  }
}
